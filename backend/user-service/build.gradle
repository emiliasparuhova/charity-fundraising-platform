plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.sonarqube" version "6.0.1.5171"
    id 'jacoco'
}

group = 'individual'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.2.1")
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'com.thoughtworks.xstream:xstream:1.4.21'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'com.h2database:h2'
}

tasks.named('test') {
    useJUnitPlatform()
}


sonar {
    properties {
        property "sonar.projectKey", "charity-platform-user-service"
        property "sonar.organization", "charity-fundraising-platform"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.token", System.getenv("SONAR_S6")
        property "sonar.coverage.exclusions", [
                "src/**/individual/userservice/domain/**/*",
                "src/**/individual/userservice/persistence/**/*",
                "src/**/individual/userservice/external/**/*",
                "src/**/individual/userservice/controller/**/*",
                "src/**/individual/userservice/configuration/**/*",
                "src/**/individual/userservice/messaging/**/*",
                "src/**/individual/userservice/UserServiceApplication.*"
        ]
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "individual/userservice/domain/*",
                    "individual/userservice/persistence/*",
                    "individual/userservice/external/*",
                    "individual/userservice/controller/*",
                    "individual/userservice/configuration/*",
                    "src/**/individual/userservice/messaging/*",
                    "individual/userservice/UserServiceApplication.class"
            ])
        }))
    }
}

tasks.named('sonar').configure {
    dependsOn jacocoTestReport
}
