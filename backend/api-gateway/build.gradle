plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "6.0.1.5171"
	id 'jacoco'
}

ext {
	set('springCloudVersion', "2024.0.1")
}

group = 'individual'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.2.1'
	implementation 'org.springframework.cloud:spring-cloud-gateway-server:4.2.3'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'com.thoughtworks.xstream:xstream:1.4.21'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


tasks.named('test') {
	useJUnitPlatform()
}

sonar {
	properties {
		property "sonar.projectKey", "charity-platform-api-gateway"
		property "sonar.organization", "charity-fundraising-platform"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.token", System.getenv("SONAR_S6")
		property "sonar.coverage.exclusions", [
				"src/**/individual/apigateway/configuration/**/*",
				"src/**/individual/apigateway/ApiGatewayApplication.*",
		]
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"individual/apigateway/configuration/*",
					"individual/apigateway/ApiGatewayApplication.class",
			])
		}))
	}
}

tasks.named('sonar').configure {
	dependsOn jacocoTestReport
}


