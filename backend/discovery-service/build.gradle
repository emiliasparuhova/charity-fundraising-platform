plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "6.0.1.5171"
	id 'jacoco'
}

group = 'individual'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server:4.2.1")
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'com.thoughtworks.xstream:xstream:1.4.21'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

configurations.all {
	exclude group: 'software.amazon.ion', module: 'ion-java'
}

tasks.named('test') {
	useJUnitPlatform()
}

sonar {
	properties {
		property "sonar.projectKey", "charity-platform-discovery-service"
		property "sonar.organization", "charity-fundraising-platform"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.token", System.getenv("SONAR_S6")
		property "sonar.coverage.exclusions", [
				"src/**/individual/apigateway/DiscoveryServiceApplication.*",
		]
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"individual/apigateway/DiscoveryServiceApplication.class",
			])
		}))
	}
}

tasks.named('sonar').configure {
	dependsOn jacocoTestReport
}
